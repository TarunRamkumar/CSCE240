	When approaching my project, I first checked what I had done with prog2. Because my prog2 search algorithm was already very robust, supporting almost any user query, I realized that I could simply reuse that code, and repurpose it. However, because I created a custom CLI for prog2, I had to create a UI processor that could parse through sentence responses rather than rigid commands. I first began by using regex to search for the companies. The default is google, and the user must specify GM if they want to access that file. The main difficulty was preventing gm from being matched if it was within a word, which I prevented by specific following characters in regex, such as a space or the end of a line. 
	I then went to finding the parts algorithm. However, I had to create a method to convert integers to roman numerals, as many users will not want to manually input roman numerals. To do this, I had to create a dictionary that matched each number with its corresponding numeral, and assign it based on that. I used regex to check if the user response inclused "Part" followed by a digit. This would allow me to use my existing searchParts() method from prog2 to search for the parts. 
	The hardest method to implement, however, was the search items function. This is because I had to handle both the heading and subheading cases. For example, a user should be able to search for both Item 1A and Risk Factors, as these are the same item in the file. To do this, I split the item into the item and subheading, and then checked to see if either of those substrings were in the user's input. If it was, then they would be recombined and passed into the searchItems() function from prog 2. 
	I also modified my existing prog2 code to work with regex. Using the "in" operator would cause integers, like a line that was just "3" to be "in" Item 3. This would cause the code to find the wrong part of the file. To prevent this, I used regex to check if the entire line matched, and if the line ended (using the "$" special character). This ensured that the items started on the right line. This also helped increase reusability, as regex is much more flexible and can be used with any 10k file. 
	In general, the biggest challenges I had with prog3 was using regex to parse through the user's input and trigger the appropriate command. I had to create an order of precedence (all, part, table of contents, item), and when two of the same are searched for, it runs with the last specified object. Regex allowed for a much greater flexibility when doing so, and this is something I will be sure to use in the future. 