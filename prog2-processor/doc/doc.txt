Process:
    In order to code this assignment, I first began by looking at each 10k and finding common patterns between them. For example, the table of contents for each file ended with "Table of Contents" and started with "PART I", and thus I could extrapolate that data very easily since the template was the same between files. This allowed me to retrieve sections of files, as I could start and end my queries based on the table of contents. The next part was creating a FileParser class, which allowed me to create objects that I could use to parse through each company's file. In each class, I would generate a table of contents, which I would then use to create the starting and ending bounds for each search query. This would allow me to retrieve specific sections of text, whilst also allowing the user to use partial matches and item subheaders for quering. Once this was done, I had to research ways to create a CLI. The method I settled on was using the imported library argparse, which allowed me to create custom commands with their corresponding arguments. This allowed me to create more flexible commands without defining a command for each combination possible. However, this method created multiple problems, as it could not access my files in other directories. I will be going to office hours tomorrow to get a fix to this issue, because the rest of my commands work properly when run in the IDE's terminal. 

Testing: 
	Whenver I write code, I always test after each method is coded. Thus, after I coded each method in my class, I print out statements to the console to see where the code is reaching. If I encounter a runtime error, I then run the debug program and iterate through the code until the error is thrown, and then I see what the environment of the code was right before the error is thrown. If I cannot figure out what is causing an error, I google to see if the problem has been solved previously. If it has not, then I try to find an alternative way to implement the code. For example, I originally based my code off the Google 10k, which resulted in parts breaking when I tried to search through the GM file. This was because of slight formatting differences, which I had to use the debug tool to fine. For example, the Google 10k's table of contents starts with "TABLE OF CONTENTS", which is what I was originally using to indicate the start of the toc. However, GM starts with "PART I", which broke the table of contents method, which resulted in the rest of the methods breaking as well. Thus, I had to modify my table of contents file, which I was only able to do using the debug tool. 

Organization:
	In order to organize my code, I mainly used a java-based method of creating objects to represent the fileparsers, which I then imported as a module into the command line interface file. This file, however, does not use objects or methods, as it simply defines the parser rules for the CLI. I did try to organize my code with the use of comments, as well. This allowed me to seperate code and summarize the functionality, with the goal of increasing reusability from other coders.
